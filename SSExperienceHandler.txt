/**
 * This function will provide a crystal with "essence", a type of experience
 * point. These points will be used for leveling purposes. In addition to storing
 * experience points, this function will provide a player with the next level 
 * shard when the experience threshold is met.
 * 
 * hvae the unequip/equip script deal with updating holder info.
 *
 * @param item_id The crystal to receive experience points.
 * 
 * WHOA I CAN MAKE THIS SQL FUCKFUCKFUCK
 
 shard_data
 key, owner_id, holder_id, item_id, level, experience
 
 key is a SHA5 representation of the unique GID
 owner_id is the original creator's account id
 holder_id is the holder's account id.
 item_id is the item id of the shard
 level is the shard's level
 experience is the essence amount the shard has.
 
 
 
 *
 * --------------------------------------------------------------------
 */
function script CSExperienceHandler {
    // Player-related function declarations.
    function storeExperience;
    function upgradeShard;
    function getEquipSlot;
    function getMobExperience;
    
    // Shard-related function declarations.
    function getShardID;
    function getShardKey;
    function getShardLevel;
    function getOwnerID;

    // Data definitions
    set .SHARD_ID, getShardID;
    set .SHARD_KEY, getShardKey;
    set .SHARD_LEVEL, getShardLevel; // sql
    set .EQUIP_SLOT, getEquipSlot;
    
    // Set the necessary experience.
    //set .EXP_TO_LEVEL, calculateExperience(.SHARD_LEVEL);
    
    // CSExperienceHandler main call.
    storeExperience;
    return;

    // FUNCTIONS
    // ========================================================================
    /**
     * This function will store experience points, known as "quintessence", for
     * leveling up shards. Calls getExperience to calculate essence. A shard becomes
     * a crystal when its max level is attained.
     */ 
    function storeExperience {
        // Store "quintessence" into the field.
        query_sql("");
        
        // Provide the player with the next level shard if
        // level threshold is met.
        if(query_sql("") > .EXP_TO_LEVEL)
            upgradeShard;
        
        return;
    }
    
    
    
    /**
     * Calculates experience based on the shard's level
     * and the server's rates.
     * @param shard_level Level of the shard.
     */
    function calculateExperience {
        // Shard level is used to raise the EXP amount.
        return;
    }



    /**
     * Upgrade the shard.
     */
    function upgradeShard {
        // Update record to reflect new data.
        // TODO: A query that updates the owner, holder, id
        //       and level. Probably have createShard handle
        //       the data update.
        query_sql("");
        
        // Unequip and delete the old shard.
        unequip .EQUIP_SLOT;
        delitem .SHARD_ID;
        
        // Create and equip the new shard.
        createShard(.SHARD_ID + 1, SHARD_LEVEL + 1);
        equip .SHARD_ID + 1;
        return;
    }



    // ACCESSOR FUNCTIONS
    // ==================================================
    /**
     * Returns the item_id parameter.
     * Used to build dynamic variables.
     */
    function getShardID {
        return getarg(0);
    }
    
    
    
    /**
     * Returns the key associated with the item id.
     * Stored in the 1st and 2nd card slot.
     */
    function getShardKey {
        set .@equipSlot, getEquipSlot;
        return (getequipcardid(.@equipSlot, 2) << 16) + getequipcardid(.@equipSlot, 1);
    }
    
    
    
    /**
     * Returns the original owners account ID.
     * Stored in the 3rd and 4th card slot.
     */
    function getOwnerID {
        set .@equipSlot, getEquipSlot;
        return (getequipcardid(.@equipSlot, 4) << 16) + getequipcardid(.@equipSlot, 3);
    }



    /**
     * Returns the Shard level. This is always in the
     * weapon level field.
     */
    function getShardLevel {
        return getiteminfo(.SHARD_ID, 13);
    }
    
    
    
    /**
     * Checks the attached player's equipment for the
     * parameter item_id. If it is found, returns the
     * equipment slot.
     */
    function getEquipSlot {
        if(getequipid(EQI_ACC_L) == .SHARD_ID)
            set .@equipslot, EQI_ACC_L;
        else
            set .@equipslot, EQI_ACC_R;

        return .@equipslot;
    }   
    
    
    
    /**
     * Returns the last slain mob's experience reward.
     */
    function getExperience {
        return getmonsterinfo(killedrid, MOB_BASEEXP); // times difficulty modifier
    }
}
 
