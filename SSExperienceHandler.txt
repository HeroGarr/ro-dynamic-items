/**
 * This function will provide a crystal with experience points. These
 * points will be used for leveling purposes. In addition to storing
 * experience points, this function will provide a player with the next
 * level shard when the experience threshold is met.
 *
 * @param item_id The crystal to receive experience points.
 */
function script CSExperienceHandler {
    // Function definitions
    function storeExperience;
    function upgradeShard;
    function getEquipSlot;
    function getMobExperience;

    // "Constants"
    // TODO: Fix this.
    set .SS_EXP_TO_LEVEL[4], 100, 100, 100, 100, 100;

    // Data definitions
    set .SHARD_ID, getShardID;
    set .SHARD_KEY, getShardKey;
    set .SHARD_LEVEL, getShardLevel;
    set .EQUIP_SLOT, getEquipSlot;
    
    // CSExperienceHandler main call.
    storeExperience;

    // FUNCTIONS
    // ========================================================================
    /**
     * This function will store experience points gained from slain
     * mobs into a dynamic variable for later use by the Shard System.
     */ 
    function storeExperience {
        // Local variables
        set .@playerID, getcharid(0);                       // The attached player.
        set .@ownerID, getOwnerID;                          // The owner of the shard.

        // If owner and attached player ids do not match,
        // attach the owner to the script for storing exp.
        if(.@playerID != .@ownerID)
            attachrid(.@ownerID);
        
        // Store slain mob experience into variable.
        setd "#SS_" + .SHARD_ID + "_" + .SHARD_KEY,
            getd("#SS_" + .SHARD_ID + "_" + .SHARD_KEY) + 
                (getMobExperience);
            
        // Check if the shard has reached level threshold.
        // If so, provide the player with the next level shard.
        if(getd("#SS_" + .SHARD_ID + "_" + .SHARD_KEY) >= .SS_EXP_TO_LEVEL[.level - 1])
            upgradeShard;
    }



    /**
     * Level up the shard.
     */
    function upgradeShard {
        // Redistribute experience. Not implemented yet.
        //if(getd("#SS_" + .itemID + "_" + .instanceID) > .SS_EXP_TO_LEVEL[.level - 1])
        //    setd "#SS_" + .itemID + "_" + .instanceID, getd("#SS_" + (.itemID + 1) + "_" + .instanceID) +
        //        (getd("#SS_" + .itemID + "_" + .instanceID) - .SS_EXP_TO_LEVEL[.@level - 1])
        
        // Zero-out the old data.
        setd "#SS_" + .SHARD_ID + "_" + .SHARD_KEY, 0;
        
        // Reattach the player if they were detached.
        // Not implemented yet.
        //if(.@playerID != playerattached())
        //    attachrid(.@playerID);
        
        // Unequip and delete the old shard.
        unequip .EQUIP_SLOT;
        delitem .SHARD_ID;
        
        // Create and equip the new shard.
        generateShard(.SHARD_ID + 1, .@playerID, generateKey, .SHARD_LEVEL + 1);
        equip .SHARD_ID + 1;
    }



    // ACCESSOR FUNCTIONS
    // ==================================================
    /**
     * Returns the item_id parameter.
     * Used to build dynamic variables.
     */
    function getShardID {
        return getarg(0);
    }
    
    
    
    /**
     * Returns the key associated with the item id.
     * This is used to build dynamic variables.
     */
    function getShardKey {
        set .@equipSlot, getEquipSlot;
        set .@shardKey, getequippedcard(1, .@equipSlot) << 16;
        set .@shardKey, .@shardKey + getequippedcard(2, .@equipSlot);
    
        return .@shardKey;
    }
    
    
    
    /**
     * Returns the original owners account ID.
     */
    function getOwnerID {
        set .@equipSlot, getEquipSlot;
        set .@ownerID, getequipcardid(3, getEquipSlot) << 16;
        set .@ownerID, .@ownerID + getequipcardid(4, getEquipSlot);
    
        return .@ownerID;
    }



    /**
     * Returns the Shard level. This is always in the
     * weapon level field.
     */
    function getShardLevel {
        return getiteminfo(.SHARD_ID, 13);
    }
    
    
    
    /**
     * Checks the attached player's equipment for the
     * parameter item_id. If it is found, returns the
     * equipment slot.
     */
    function getEquipSlot {
        if(getequipid(EQI_ACC_L) == .SHARD_ID)
            set .@equipslot, EQI_ACC_L;
        else
            set .@equipslot, EQI_ACC_R;

        return .@equipslot;
    }   
    
    
    
    /**
     * Returns the last slain mob's experience reward.
     */
    function getMobExperience {
        return getmonsterinfo(killedrid, MOB_BASEEXP);
    }
}
 
