
    /**
     * Creates a new shard. This function is used to setup a
     * new shard with a database entry and store its key.
     * @param shard_id The id of the shard to give to the player.
     */
    function script SSCreateShard {
        // Data definition.
        set .@shard_id, getarg(0);
    
        // Create a new shard entry in the DB.
        query_sql("
            INSERT INTO `shard` (`creator_id`, `creator_name`, `date_created`, `item_id`)
            VALUES("+ getchardid(0) +", '"+ strcharinfo(0) +"', GETDATE(), "+ .@itemID +")
        ");

        // Grabs the latest entries' id. This is used later for
        // determining the correct shard in scripts.
        query_sql("SELECT MAX(`id`) AS `id` FROM `shard`", .@shard_key);

        // Break the key down and store it.
        set .@card3, .@shard_key[0] & 65535;
        set .@card4, .@shard_key[0] >> 16;
        
        // Provide the player with the shard.
        getitem2 .@shard_id,1,1,0,0,,,.@card3,.@card4;
        return;
    }
    
    
    
    /**
     * Upgrades an existing shard.
     * @param shard_id The id of the shard being upgraded.
     * @param shard_key The keythat will be passed on.
     */
    function script SSUpgradeShard {
        // Data definitions.
        set .@shard_id, getarg(0);
        set .@shard_key, getarg(1);
    
        // Update the database record.
        query_sql("
            UPDATE `shard`
            SET `item_id` = `item_id` + 1, `level` = `level` + 1
            WHERE `id` = " + .@shard_key
        )

        // Break the key down.
        set .@card3, .@shard_key & 65535;
        set .@card4, .@shard_key >> 16;

        // Provide the player with the new shard.
        getitem2 .@shard_id + 1,1,1,0,0,,,.@card3,.@card4;
        return;
    }




/**
 * Work on this way later.
 */
function	script	determineShard	{

}
