/**
 * Generates a shard from parameters passed.
 * An empty field means its making a clean shard.
 * itemid, key makes upgraded shard
 */
function	script	SSGenerateShard	{
    // Function definitions.
    function createShard;
    function upgradeShard;
    
    // Local variables.
    set .@shard_id, getarg(0,0);
    set .@shard_key, getarg(0,1);

    // If two parameters are detected, call upgradeShard.
    // If one parameter is detected, call createShard.
    if(.@shard_id && .@shard_key)
       upgradeShard;
    else if(.@shard_id(0,0))
       createShard;
    
    // Otherwise return.
    return;
    
    
    
    
    /**
     *
     */
    function createShard {
        // Create a new shard entry in the DB.
        query_sql("
            INSERT INTO `shard` (`creator_id`, `creator_name`, `date_created`, `item_id`)
            VALUES("+ getchardid(0) +", '"+ strcharinfo(0) +"', GETDATE(), "+ .@itemID +")
        ");

        // Grabs the latest entries' id. This is used later for
        // determining the correct shard in scripts.
        query_sql("SELECT MAX(`id`) AS `id` FROM `shard`", .@key);

        // Break the key down.
        // and store them.
        set .@card3, .@key[0] & 65535;
        set .@card4, .@key[0] >> 16;
        
        // Provide the player with the shard.
        getitem2 getarg(0),1,1,0,0,,,.@card3,.@card4;
        return;
    }
    
    
    
    /**
     *
     */
    function upgradeShard {
        // Update the database record.
        query_sql("
            UPDATE `shard`
            SET `item_id` = `item_id` + 1, `level` = `level` + 1
            WHERE `id` = "+ .@key +"
        ")

        // Break the key down.
        set .@card3, .@key & 65535;
        set .@card4, .@key >> 16;

        // Provide the player with the new shard.
        getitem2 getarg(0),1,1,0,0,,,.@card3,.@card4;
        return;
    }
}




/**
 * Work on this way later.
 */
function	script	determineShard	{

}
