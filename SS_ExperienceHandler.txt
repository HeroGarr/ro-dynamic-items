/**
 * This function will provide a crystal with "essence", a type of experience
 * point. These points will be used for leveling purposes. In addition to storing
 * experience points, this function will provide a player with the next level 
 * shard when the experience threshold is met.
 * 
 * TODO: hvae the unequip/equip script deal with updating holder info.
 */


/**
 * Compatible with r15982 and up.
 * ...,{ bonus bAllStats, 1; },{ SS_ACTIVE_CNT += 1; },{ SS_ACTIVE_CNT -= 1; }
 */
- script    SS_ExperienceHandler  -1,{
    OnNPCKillEvent:
        if(SS_ACTIVE_CNT) {
            // ...
            if(SS_ACTIVE_CNT > 1) {
                SS_Main(getequipid(EQI_ACC_L), EQI_ACC_L);
                SS_Main(getequipid(EQI_ACC_R), EQI_ACC_R);
                return;
            }

            // ...
            for(.@i = EQI_ACC_L; i <= EQI_ACC_R; .@i += 1) {
                if(getiteminfo(.@i, 2)) {
                    SS_Main(getequipid(.@i), .@i);
                    return;
                }
            }
        }
}



/**
 * ...
 * @param .@SHARD_ID
 * @param .@EQUIP_SLOT
 */
function script SS_Main {
    // Local function declarations.
    function storeExperience;
    function upgradeShard;
    function getShardID;
    function getEquipSlot;
    function getPrimaryKey;
    function getShardLevel;
    function getExperience;

    // Data definitions
    .@SHARD_ID = getShardID;
    .@EQUIP_SLOT = getEquipSlot;
    .@SHARD_PKEY = getPrimaryKey;
    .@SHARD_LEVEL = getShardLevel;

    // MAIN CALL
    storeExperience;
    return;



    // MAIN FUNCTIONS
    // ========================================================================
    /**
     * This function will store experience points, known as "quintessence", for
     * leveling up shards. Calls getExperience to calculate essence. A shard becomes
     * a crystal when its max level is attained.
     */
    function storeExperience {
        // Store "quintessence" into the experience field.
        query_sql("
            UPDATE `shard`
            SET `experience` = `experience` + "+ getExperience +"
            WHERE `id` = " + .@SHARD_KEY
        ");

        // Provide the player with the next level shard if level threshold is met.
        if(query_sql("SELECT `experience` FROM `shard` WHERE `id` = " + .@SHARD_KEY) > $SS_NEXT_LEVEL)
            upgradeShard;

        // Success
        return 0;
    }

    /**
     * Upgrade the shard.
     */
    function upgradeShard {
        // Unequip and delete the old shard.
        unequip .@EQUIP_SLOT;
        delitem .@SHARD_ID;

        // Create and equip the new shard.
        SS_UpgradeShard(.@SHARD_ID, .@SHARD_PKEY);
        equip .@SHARD_ID + 1;
        return;
    }

    // ACCESSOR FUNCTIONS
    // ==================================================
    /**
     * Returns the item_id parameter.
     * Used to determine the equipped item.
     */
    function getShardID {
        return getarg(0);
    }
    
    /**
     * Returns the equip_slot parameter.
     * Used the determine which shard is upgraded.
    function getEquipSlot {
        return getarg(1);
    }
    
    /**
     * Returns the 32-bit primary key.
     */
    function getPrimaryKey {
        return (getequipcardid(.@EQUIP_SLOT, 3) << 16) + getequipcardid(.@EQUIP_SLOT, 4);
    }

    /**
     * Returns the Shard level.
     */
    function getShardLevel {
        return getiteminfo(.SHARD_ID, 13);
    }
    
    /**
     * Returns the last slain mob's experience. This value
     * is modified by $SS_EXPERIENCE_SHARE in settings.conf
     */
    function getExperience {
        // Gather monster experience.
        .@MOB_EXPERIENCE = getmonsterinfo(killedrid, MOB_BASEEXP);
        return .@MOB_EXPERIENCE = (.@MOB_EXPERIENCE * $SS_EXPERIENCE_SHARE) / 100;
    }
}
 
