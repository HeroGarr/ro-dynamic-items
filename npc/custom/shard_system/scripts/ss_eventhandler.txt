/**
 * Provides experience to the shard then
 * upgrades it when level threshold is met.
 * @param .@equip_slot Equipment slot for clarification.
 * @param .@base_exp Experience to be modified then provided.
 */
function script SSEventHandler {
    // Local function declarations.
    function getExperience;
    function getNextExperience;
    function updateExperience;
    function getShardID;
    function getShardKey;
    function getShardLevel;
    function getShardPosition;
    function upgradeShard;

    // Data definitions
    .@base_exp = getExperience;
    .@base_next_exp = getNextExperience;
    .@shard_id = getShardID;
    .@shard_key = getShardKey;
    .@shard_level = getShardLevel;
    .@shard_pos = getShardPosition;

    updateExperience;
    return;


    // MAIN FUNCTIONS
    // ========================================================================
    /**
     * This function will store experience points, known as "quintessence", for
     * leveling up shards. Calls getExperience to calculate essence. A shard becomes
     * a crystal when its max level is attained.
     */
    function updateExperience {
        // Store mob exp into the experience field.
        query_sql("
            UPDATE `shard`
            SET `experience` = `experience` + "+ .@mob_exp +"
            WHERE `id` = " + .@shard_key
        ");

        // Provide the player with the next level shard if level threshold is met.
        if(query_sql("SELECT `experience` FROM `shard` WHERE `id` = " + .@shard_key) >= .@next_exp)
            upgradeShard;

        // Success
        return 0;
    }

    /**
     * Upgrade the shard and provide player with the next
     * level of the item.
     */
    function upgradeShard {
        // Unequip and delete the old shard.
        unequip .@equip_slot;
        SSDeleteShard(.@shard_id, .@shard_key);

        // Create and equip the new shard.
        SSUpgradeShard(.@shard_id, .@shard_key);
        SSEquipShard(.@shard_id, .@shard_key);
        return;
    }

    /**
     * Returns the 32-bit primary key.
     */
    function getShardKey {
        return (getequipcardid(.@shard_pos, 2) << 16) + getequipcardid(.@shard_pos, 3);
    }

    /**
     * Returns the Shard level.
     */
    function getShardLevel {
        return getiteminfo(.@shard_id, 13);
    }
    
    function    getShardPosition    {
        return getarg(
    }
    
    /**
     * Returns the last slain mob's experience.
     * TODO: Ensure -1 is never returned?
     * TODO: Should shard_exp_rate increase based on difficulty_factor?
     * TODO: Recreate this to use BaseExp, NextBaseExp and the difference
     * between monster kills. This will be more accurate.
     */
    function getExperience {
        // Make sure shard_exp_rate is not negative or zero.
        if(($shard_exp_rate - (.@shard_level * $difficulty_mf)) <= 0)
            $shard_exp_rate = .@shard_level + 1;

        // Gather a percentage of monster base experience by shard_exp_rate.
        .@gained_exp = ($shard_exp_rate - (.@shard_level * $difficulty_mf)) * (getmonsterinfo(killedrid, MOB_BASEEXP) / 100);

        // Provide a bonus based on shard_exp_boss_rate when a mini-boss or boss is killed.
        if(getmonsterinfo(killedrid, MOB_MODE) & 32)
            .@gained_exp += $shard_exp_boss_rate * (.@gained_exp / 100);

        return .@gained_exp;
    }

    /**
     * Returns the experience necessary to level.
     */
    function getNextExperience    {
        return .@base_next_level = .@shard_level * ($shard_base_exp * $server_rate);
    }
}
