/**
 * Provides experience to the shard then
 * upgrades it when level threshold is met.
 * @param .@position Equipment slot for clarification.
 * @param .@experience Experience to be modified then provided.
 */
function script SSEventHandler {
    // Local function declarations.
    function getExperience;
    function getNextExperience;
    function updateExperience;
    function getShardID;
    function getShardKey;
    function getShardLevel;
    function upgradeShard;

    // Error handling
    if((getarg(0,0) != EQI_ACC_L) || (getarg(0,0) != EQI_ACC_R)) {
        debugmes "[Error] invalid parameter at ss_eventhandler: " + getarg(0);
        debugmes "Parameter must be EQI_ACC_L or EQI_ACC_R!";
        return;
    }
    
    if(getarg(1,0) <= 0) {
        debugmes "[Error] invalid parameter at ss_eventhandler: " + getarg(1);
        debugmes "Parameter must be greater than zero!";
        return;
    }

    // Data definitions
    .@total_exp = getExperience;
    .@next_exp = getNextExperience;
    .@shard_id = getShardID;
    .@shard_key = getShardKey;
    .@shard_level = getShardLevel;
    .@shard_pos = getarg(1);

    updateExperience;
    return;


    // MAIN FUNCTIONS
    // ========================================================================
    /**
     * This function will store experience points, known as "quintessence", for
     * leveling up shards. Calls getExperience to calculate essence. A shard becomes
     * a crystal when its max level is attained.
     */
    function updateExperience {
        // Store mob exp into the experience field.
        query_sql("
            UPDATE `shard`
            SET `experience` = `experience` + "+ .@mob_exp +"
            WHERE `id` = " + .@shard_key
        ");

        // Provide the player with the next level shard if level threshold is met.
        if(query_sql("SELECT `experience` FROM `shard` WHERE `id` = " + .@shard_key) >= .@next_exp)
            upgradeShard;

        // Success
        return 0;
    }
    
    /**
     * Returns the last slain mob's total experience.
     * TODO: Only accounts for < lv 100 atm
     * TODO: Test formula.
     */
    function getExperience {
        // ...
        .@base_exp = getarg(0) / 100;
        .@base_pct = MAX_LEVEL - (BaseLevel + .@shard_level);
        
        // ...
        if(.@base_pct < $base_pct)
            .@base_pct = $base_pct;
            
        // ...
        .@gained_exp = .@base_exp * .@base_pct;
        
        // ...
        if(getmonsterinfo(killedrid, MOB_MODE) & 32)
            .@gained_exp += (.@gained_exp / 100) * $shard_boss_rate;
        
        // ...
        return .@gained_exp
    }

    /**
     * Returns the experience necessary to level.
     * TODO: Rework formulae
     */
    function getNextExperience    {
        return .@next_level = .@shard_level * ($shard_base_exp * $server_rate);
    }

    /**
     * Upgrade the shard and provide player with the next
     * level of the item.
     */
    function upgradeShard {
        // Unequip and delete the old shard.
        unequip .@equip_slot;
        SSDeleteShard(.@shard_id, .@shard_key);

        // Create and equip the new shard.
        SSUpgradeShard(.@shard_id, .@shard_key);
        SSEquipShard(.@shard_id, .@shard_key);
        return;
    }

    /**
     * Return the shard ID based on equip position.
     */
    function getShardID {
        return getequipid(.@shard_pos);
    }

    /**
     * Derives the database primary key from card slots.
     */
    function getShardKey {
        return (getequipcardid(.@shard_pos, 2) << 16) + getequipcardid(.@shard_pos, 3);
    }

    /**
     * Returns the shard level from the wLv field.
     */
    function getShardLevel {
        return getiteminfo(.@shard_id, 13);
    }
}
